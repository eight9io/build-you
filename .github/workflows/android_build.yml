name: Build You App Building ## name of the workflow

on: workflow_dispatch
jobs:
  setup:
    name: Install NodeJS Dependency
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

  #  Android Build
  android-build:
    name: Android Build
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    needs: setup

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v3
        with:
          distribution: "zulu" # See 'Supported distributions' for available options
          java-version: "11.0.20"

      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate App APK
        run: |
          cd android && ./gradlew bundleRelease

      - name: Sign APK
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-build-artifact
          path: android/app/build/outputs/bundle/release
          retention-days: 2

  android-publish:
    name: Android Publish
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    needs: android-build

    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: android-build-artifact

      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{secrets.ANDROID_FIREBASE_TOKEN}}
          groups: testers
          file: ${{steps.sign_app.outputs.signedReleaseFile}}

  #  iOS Build
  # ios-build:
  #   name: IOS Production Build
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: ios

  #   steps:
  #     - name: Check out Git repository
  #       uses: actions/checkout@v2

  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Restore node_modules from cache
  #       uses: actions/cache@v2
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #     - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
  #       run: yarn install --frozen-lockfile

  #     - name: Setup Ruby (bundle)
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.2.2
  #         bundler-cache: true

  #     - name: Restore Pods cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ios/Pods
  #           ~/Library/Caches/CocoaPods
  #           ~/.cocoapods
  #         key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pods-

  #     - name: Install Pods
  #       run: cd ios && pod install --repo-update && cd ..

  #     - name: Build IOS App
  #       uses: yukiarrr/ios-build-action@v1.4.0
  #       with:
  #         project-path: ios/MyApp.xcodeproj
  #         p12-base64: ${{ secrets.IOS_P12_BASE64 }}
  #         mobileprovision-base64: ${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}
  #         code-signing-identity: "iPhone Distribution"
  #         team-id: ${{ secrets.IOS_TEAM_ID }}
  #         certificate-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
  #         workspace-path: ios/MyApp.xcworkspace
  #         scheme: MyApp

  #     - name: "Upload app to TestFlight"
  #       uses: apple-actions/upload-testflight-build@v1
  #       with:
  #         app-path: "output.ipa"
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
