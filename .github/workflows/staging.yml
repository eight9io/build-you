name: Staging Build You App Building

on: workflow_dispatch

env:
  NODE_VERSION: 20.5.0
  JAVA_VERSION: 11.0.20

jobs:
  setup:
    name: Install NodeJS Dependency
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install project dependencies
        run: yarn

  #  Android Build
  android-build:
    name: Android Build
    runs-on: macos-latest
    needs: setup

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Prepare ENV
        run: |
          echo $ENV_STAGING | base64 --decode >> ".env"

        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install project dependencies
        run: yarn

      - name: Set up our JDK environment
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Prebuild Expo
        run: npx expo prebuild
        shell: bash

      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate App AAB
        run: |
          cd android && ./gradlew assembleRelease --no-daemon

      - name: Sign AAB
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY_STAGING }}
          alias: ${{ secrets.ANDROID_ALIAS_STAGING }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD_STAGING }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD_STAGING }}

      - uses: actions/upload-artifact@v2
        with:
          name: app-release.aab
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  android-distribute:
    name: Android Distribute
    needs: android-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - uses: actions/download-artifact@v2
        with:
          name: app-release.aab

      - name: Distrbute Firebase
        run: |
          echo $CREDENTIAL_FILE_CONTENT_STAGING > "$RUNNER_TEMP/credential.json"
          export GOOGLE_APPLICATION_CREDENTIALS="$RUNNER_TEMP/credential.json"
          npx firebase-tools \
            appdistribution:distribute android/app/build/outputs/bundle/release/app-release.aab \
            --app $ANDROID_FIREBASE_APP_ID_STAGING \
            --groups "testers" \
            $( (( $INPUT_DEBUG )) && printf %s '--debug' )
        shell: bash
        env:
          CREDENTIAL_FILE_CONTENT_STAGING: ${{ secrets.CREDENTIAL_FILE_CONTENT_STAGING }}
          ANDROID_FIREBASE_APP_ID_STAGING: ${{ secrets.ANDROID_FIREBASE_APP_ID_STAGING }}

  # #  iOS Build
  ios-build:
    name: iOS Build
    runs-on: macos-latest
    needs: setup
    # defaults:
    #   run:
    #     working-directory: ios

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Build Cache
        uses: mikehardy/buildcache-action@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install project dependencies
        run: yarn

      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Restore Pods cache
        uses: actions/cache@v3
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: cd ios && pod install --repo-update && cd ..

      # https://github.com/mikehardy/buildcache-action
      - name: Build IOS App
        uses: yukiarrr/ios-build-action@v1.11.0
        with:
          project-path: ios/BuildYou.xcodeproj
          p12-base64: ${{ secrets.STAGING_BUILD_CERTIFICATE_BASE64 }}
          mobileprovision-base64: ${{ secrets.STAGING_BUILD_PROVISION_PROFILE_BASE64 }}
          code-signing-identity: "iPhone Distribution"
          team-id: JWQ9T5PFH2
          certificate-password: ${{ secrets.STAGING_P12_PASSWORD }}
          workspace-path: ios/BuildYou.xcworkspace
          scheme: BuildYou
          export-method: ad-hoc
          export-options: ios/ExportOptions.plist
          output-path: app.ipa

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app.ipa
          path: app.ipa
          retention-days: 1
          if-no-files-found: error

  ios-distribute:
    name: iOS Distribute
    needs: ios-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - uses: actions/download-artifact@v2
        with:
          name: app.ipa

      - name: Distrbute Firebase # app id can be found in GoogleService-Info.plist
        run: |
          echo $CREDENTIAL_FILE_CONTENT_STAGING > "$RUNNER_TEMP/credential.json"
          export GOOGLE_APPLICATION_CREDENTIALS="$RUNNER_TEMP/credential.json"
          npx firebase-tools \
            appdistribution:distribute app.ipa \
            --app $IOS_FIREBASE_APP_ID_STAGING \
            --groups "testers" \
            $( (( $INPUT_DEBUG )) && printf %s '--debug' )
        shell: bash
        env:
          CREDENTIAL_FILE_CONTENT_STAGING: ${{ secrets.CREDENTIAL_FILE_CONTENT_STAGING }}
          IOS_FIREBASE_APP_ID_STAGING: ${{ secrets.IOS_FIREBASE_APP_ID_STAGING }}

  # - name: "Upload app to TestFlight"
  #   uses: apple-actions/upload-testflight-build@v1
  #   with:
  #     app-path: "output.ipa"
  #     issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #     api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #     api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
